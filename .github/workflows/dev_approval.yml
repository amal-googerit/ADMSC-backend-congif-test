name: Dev Approval and Manual Testing

on:
  push:
    branches: [main]

jobs:
  dev-approval:
    runs-on: ubuntu-latest
    name: Dev Approval Process

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Check Run (In Progress)
        id: create_check
        run: |
          echo "📋 Creating dev/manual-testing check run..."

          # Create check run in progress state
          CHECK_RUN_ID=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/check-runs" \
            -d '{
              "name": "dev/manual-testing",
              "head_sha": "'${{ github.sha }}'",
              "status": "in_progress",
              "output": {
                "title": "Manual Testing Required",
                "summary": "Waiting for manual testing on Dev droplet",
                "text": "Please test the changes on the Dev droplet and run the approval/rejection scripts."
              }
            }' | jq -r '.id')

          echo "check_run_id=$CHECK_RUN_ID" >> $GITHUB_OUTPUT
          echo "✅ Check run created with ID: $CHECK_RUN_ID"

      - name: Create GitHub Issue
        run: |
          echo "📝 Creating GitHub issue for manual testing..."

          # Create issue body
          cat > issue_body.md << 'EOF'
          # 🧪 Manual Testing Required

          **Commit**: `${{ github.sha }}`
          **Branch**: `${{ github.ref_name }}`
          **Author**: `${{ github.actor }}`

          ## 📋 Testing Instructions

          Please test the following changes on the Dev droplet:

          ### 1. SSH to Dev Server
          ```bash
          ssh user@your-dev-server
          cd /opt/admsc-backend-dev
          ```

          ### 2. Pull Latest Changes
          ```bash
          git pull origin main
          ```

          ### 3. Restart Services
          ```bash
          docker compose -f compose/prod/docker-compose.yml down
          docker compose -f compose/prod/docker-compose.yml up --build -d
          ```

          ### 4. Test Application
          ```bash
          # Test main endpoint
          curl http://localhost:8000/

          # Test API endpoints
          curl http://localhost:8000/api/website-data/
          curl http://localhost:8000/api/update-redis/
          ```

          ### 5. Approve or Reject

          **If tests pass:**
          ```bash
          ./scripts/approve-dev.sh
          ```

          **If tests fail:**
          ```bash
          ./scripts/reject-dev.sh
          ```

          ## 📊 Check Run Status

          - **Check Run ID**: `${{ steps.create_check.outputs.check_run_id }}`
          - **Status**: In Progress
          - **Action Required**: Manual testing and approval/rejection

          ---
          *This issue will be closed automatically when approval/rejection is processed.*
          EOF

          # Create the issue
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues" \
            -d '{
              "title": "🧪 Manual Testing Required - Commit '${{ github.sha }}'",
              "body": "'$(cat issue_body.md | sed 's/"/\\"/g' | tr '\n' '\\n')'",
              "labels": ["testing", "manual-approval"]
            }' | jq -r '.number'

          echo "✅ GitHub issue created for manual testing"

      - name: Notify @amal-googerit
        run: |
          echo "📢 Notifying @amal-googerit about manual testing requirement..."

          # Create notification comment
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/comments" \
            -d '{
              "body": "🧪 @amal-googerit Manual testing required for commit `'${{ github.sha }}'`. Please check the GitHub issue for testing instructions."
            }'

          echo "✅ Notification sent to @amal-googerit"

      - name: Send Slack Notification (Optional)
        if: env.ENABLE_SLACK == 'true'
        run: |
          echo "📢 Sending Slack notification for manual testing requirement..."

          # Get commit information
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
          COMMIT_URL="${{ github.event.head_commit.url }}"

          # Create Slack message
          SLACK_MESSAGE="{
            \"text\": \"🧪 Manual Testing Required\",
            \"blocks\": [
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \"🧪 Manual Testing Required\"
                }
              },
              {
                \"type\": \"section\",
                \"fields\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Commit:* <$COMMIT_URL|$COMMIT_SHA>\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Author:* $COMMIT_AUTHOR\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Status:* ⏳ Waiting for manual testing\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Repository:* ${{ github.repository }}\"
                  }
                ]
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"📋 *Next Steps:*\\n• SSH to dev server\\n• Pull latest changes\\n• Test the application\\n• Run approve/reject scripts\"
                }
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"View Commit\"
                    },
                    \"url\": \"$COMMIT_URL\"
                  }
                ]
              }
            ]
          }"

          # Send to Slack
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "$SLACK_MESSAGE"

      - name: Store Check Run ID
        run: |
          echo "💾 Storing check run ID for later use..."
          echo "${{ steps.create_check.outputs.check_run_id }}" > check_run_id.txt

          # Also store in a way that server scripts can access
          echo "CHECK_RUN_ID=${{ steps.create_check.outputs.check_run_id }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
