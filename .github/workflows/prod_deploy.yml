name: Production Deployment

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Deployment mode'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback
        - delete-branch
      branch_name:
        description: 'Branch name (for delete-branch mode)'
        required: false
        type: string

jobs:
  prod-deploy:
    runs-on: ubuntu-latest
    name: Production Deployment

    # Only allow amal-googerit to run this workflow
    if: github.actor == 'amal-googerit'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "amal-googerit"
          git config user.email "amal-googerit@users.noreply.github.com"

      # ====================================================================
      # DEPLOY MODE
      # ====================================================================
      - name: Check Dev Approval Status (Deploy Mode)
        if: github.event.inputs.mode == 'deploy'
        id: check_dev_status
        run: |
          echo "üîç Checking dev/manual-testing status..."

          # Get the latest check run for dev/manual-testing
          CHECK_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs")

          DEV_CHECK=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.name == "dev/manual-testing") | .conclusion')

          if [ "$DEV_CHECK" = "success" ]; then
            echo "‚úÖ Dev approval successful - proceeding with deployment"
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Dev approval not successful - deployment blocked"
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Deploy to Production
        if: github.event.inputs.mode == 'deploy' && steps.check_dev_status.outputs.approved == 'true'
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            set -e
            echo "üöÄ Starting production deployment..."

            APP_DIR="/opt/admsc-backend"

            # Navigate to app directory
            cd $APP_DIR

            # Create backup before update
            echo "üì¶ Creating backup..."
            sudo cp -r $APP_DIR $APP_DIR.backup.$(date +%Y%m%d_%H%M%S) || true

            # Pull latest changes
            echo "üì• Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main

            # Stop existing containers
            echo "üõë Stopping existing containers..."
            docker compose -f compose/prod/docker-compose.yml down || true

            # Pull latest images
            echo "üì• Pulling latest images..."
            docker compose -f compose/prod/docker-compose.yml pull

            # Start services
            echo "üöÄ Starting services..."
            docker compose -f compose/prod/docker-compose.yml up --build -d

            # Wait for services to be ready
            echo "‚è≥ Waiting for services to start..."
            sleep 30

            # Run database migrations
            echo "üóÑÔ∏è Running database migrations..."
            docker compose -f compose/prod/docker-compose.yml exec -T web python manage.py migrate --noinput

            # Collect static files
            echo "üìÅ Collecting static files..."
            docker compose -f compose/prod/docker-compose.yml exec -T web python manage.py collectstatic --noinput

            # Health check
            echo "üè• Performing health check..."
            sleep 10
            if curl -f -s http://localhost:8000/health/ > /dev/null; then
              echo "‚úÖ Production deployment successful!"
              echo "üåê Application is running at: https://${{ secrets.PROD_DOMAIN || 'your-domain.com' }}"
            else
              echo "‚ùå Health check failed. Rolling back..."

              # Rollback to backup
              LATEST_BACKUP=$(ls -t $APP_DIR.backup.* | head -1)
              if [ -n "$LATEST_BACKUP" ]; then
                echo "üîÑ Rolling back to: $LATEST_BACKUP"
                sudo rm -rf $APP_DIR
                sudo mv $LATEST_BACKUP $APP_DIR
                cd $APP_DIR
                docker compose -f compose/prod/docker-compose.yml up --build -d
              fi

              exit 1
            fi

      - name: Create GitHub Deployment Record
        if: github.event.inputs.mode == 'deploy' && steps.check_dev_status.outputs.approved == 'true'
        run: |
          echo "üìù Creating GitHub deployment record..."

          # Create deployment record
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/deployments" \
            -d '{
              "ref": "'${{ github.sha }}'",
              "environment": "production",
              "description": "Production deployment via CI/CD",
              "auto_merge": false
            }' | jq -r '.id' > deployment_id.txt

          DEPLOYMENT_ID=$(cat deployment_id.txt)
          echo "‚úÖ Deployment record created with ID: $DEPLOYMENT_ID"

          # Update deployment status to success
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses" \
            -d '{
              "state": "success",
              "description": "Production deployment completed successfully",
              "environment_url": "https://'${{ secrets.PROD_DOMAIN || 'your-domain.com' }}'"
            }'

      # ====================================================================
      # ROLLBACK MODE
      # ====================================================================
      - name: Rollback to Last Successful Deployment
        if: github.event.inputs.mode == 'rollback'
        run: |
          echo "üîÑ Starting rollback process..."

          # Get last successful production deployment
          LAST_DEPLOYMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/deployments?environment=production&per_page=1" | \
            jq -r '.[0].sha // empty')

          if [ -z "$LAST_DEPLOYMENT" ]; then
            echo "‚ùå No successful production deployment found"
            exit 1
          fi

          echo "üìã Last successful deployment SHA: $LAST_DEPLOYMENT"

          # Reset to last successful deployment
          git reset --hard $LAST_DEPLOYMENT
          git push origin main --force

          echo "‚úÖ Rollback completed to SHA: $LAST_DEPLOYMENT"

      # ====================================================================
      # DELETE BRANCH MODE
      # ====================================================================
      - name: Delete Branch
        if: github.event.inputs.mode == 'delete-branch' && github.event.inputs.branch_name != ''
        run: |
          echo "üóëÔ∏è Deleting branch: ${{ github.event.inputs.branch_name }}"

          # Delete the branch via GitHub API
          curl -s -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ github.event.inputs.branch_name }}"

          echo "‚úÖ Branch ${{ github.event.inputs.branch_name }} deleted successfully"

      - name: Send Slack Notification (Optional)
        if: env.ENABLE_SLACK == 'true'
        run: |
          echo "üì¢ Sending Slack notification for deployment completion..."

          # Determine status based on mode
          if [ "${{ github.event.inputs.mode }}" = "deploy" ]; then
            STATUS_EMOJI="üöÄ"
            STATUS_TEXT="Production Deployment Completed"
            STATUS_DESC="Successfully deployed to production"
          elif [ "${{ github.event.inputs.mode }}" = "rollback" ]; then
            STATUS_EMOJI="üîÑ"
            STATUS_TEXT="Rollback Completed"
            STATUS_DESC="Successfully rolled back to previous deployment"
          elif [ "${{ github.event.inputs.mode }}" = "delete-branch" ]; then
            STATUS_EMOJI="üóëÔ∏è"
            STATUS_TEXT="Branch Deleted"
            STATUS_DESC="Successfully deleted branch: ${{ github.event.inputs.branch_name }}"
          else
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="Action Completed"
            STATUS_DESC="Workflow completed successfully"
          fi

          # Create Slack message
          SLACK_MESSAGE="{
            \"text\": \"$STATUS_EMOJI $STATUS_TEXT\",
            \"blocks\": [
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \"$STATUS_EMOJI $STATUS_TEXT\"
                }
              },
              {
                \"type\": \"section\",
                \"fields\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Action:* ${{ github.event.inputs.mode }}\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Actor:* ${{ github.actor }}\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Status:* ‚úÖ Completed\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Repository:* ${{ github.repository }}\"
                  }
                ]
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"üìã *Description:*\\n$STATUS_DESC\"
                }
              },
              {
                \"type\": \"context\",
                \"elements\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"‚è∞ Completed at: $(date)\"
                  }
                ]
              }
            ]
          }"

          # Send to Slack
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "$SLACK_MESSAGE"

      - name: Notify Completion
        run: |
          echo "üì¢ Deployment process completed!"
          echo "Mode: ${{ github.event.inputs.mode }}"
          echo "Actor: ${{ github.actor }}"
          echo "Time: $(date)"
