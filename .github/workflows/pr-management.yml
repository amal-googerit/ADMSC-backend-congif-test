name: PR Management Actions

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'revert'
        type: choice
        options:
        - revert
        - delete-branch
        - deploy-production
        - set-health-bad
        - set-health-good
      pr_number:
        description: 'PR Number'
        required: true
        type: string
      confirm_action:
        description: 'Type "CONFIRM" to proceed'
        required: true
        type: string

jobs:
  pr-management:
    runs-on: ubuntu-latest
    name: PR Management Actions
    
    # Only allow amal-googerit to run this workflow
    if: github.actor == 'amal-googerit'
    
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_action }}" != "CONFIRM" ]; then
            echo "❌ Action not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi
          echo "✅ Action confirmed by @amal-googerit"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "amal-googerit"
          git config user.email "amal-googerit@users.noreply.github.com"

      # ====================================================================
      # REVERT PR ACTION
      # ====================================================================
      - name: Revert PR
        if: github.event.inputs.action == 'revert'
        run: |
          echo "🔄 Reverting PR #${{ github.event.inputs.pr_number }}"
          
          # Get PR information
          PR_INFO=$(gh pr view ${{ github.event.inputs.pr_number }} --json mergeCommit,title,author --jq '.mergeCommit.oid, .title, .author.login' || echo "")
          
          if [ -z "$PR_INFO" ]; then
            echo "❌ Could not find PR #${{ github.event.inputs.pr_number }}"
            exit 1
          fi
          
          # Extract merge commit hash
          MERGE_COMMIT=$(echo "$PR_INFO" | head -1)
          PR_TITLE=$(echo "$PR_INFO" | sed -n '2p')
          PR_AUTHOR=$(echo "$PR_INFO" | sed -n '3p')
          
          echo "Reverting merge commit: $MERGE_COMMIT"
          
          # Create revert commit
          git revert --no-edit $MERGE_COMMIT
          
          # Push the revert
          git push origin main
          
          echo "✅ Successfully reverted PR #${{ github.event.inputs.pr_number }}"

      # ====================================================================
      # DELETE BRANCH ACTION
      # ====================================================================
      - name: Delete Branch
        if: github.event.inputs.action == 'delete-branch'
        run: |
          echo "🗑️ Deleting branch for PR #${{ github.event.inputs.pr_number }}"
          
          # Get branch name from PR
          BRANCH_NAME=$(gh pr view ${{ github.event.inputs.pr_number }} --json headRefName --jq '.headRefName' || echo "")
          
          if [ -z "$BRANCH_NAME" ]; then
            echo "❌ Could not find branch for PR #${{ github.event.inputs.pr_number }}"
            exit 1
          fi
          
          echo "Deleting branch: $BRANCH_NAME"
          
          # Delete the branch
          git push origin --delete $BRANCH_NAME || echo "Branch may already be deleted"
          
          echo "✅ Successfully deleted branch: $BRANCH_NAME"

      # ====================================================================
      # DEPLOY TO PRODUCTION ACTION
      # ====================================================================
      - name: Deploy to Production
        if: github.event.inputs.action == 'deploy-production'
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            set -e
            echo "🚀 Starting production deployment for PR #${{ github.event.inputs.pr_number }}"
            
            APP_DIR="/opt/admsc-backend"
            
            # Navigate to app directory
            cd $APP_DIR
            
            # Create backup before update
            echo "📦 Creating backup..."
            sudo cp -r $APP_DIR $APP_DIR.backup.pr${{ github.event.inputs.pr_number }}.$(date +%Y%m%d_%H%M%S) || true
            
            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
            
            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            docker compose -f compose/prod/docker-compose.yml down || true
            
            # Pull latest images
            echo "📥 Pulling latest images..."
            docker compose -f compose/prod/docker-compose.yml pull
            
            # Start services
            echo "🚀 Starting services..."
            docker compose -f compose/prod/docker-compose.yml up --build -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Run database migrations
            echo "🗄️ Running database migrations..."
            docker compose -f compose/prod/docker-compose.yml exec -T web python manage.py migrate --noinput
            
            # Collect static files
            echo "📁 Collecting static files..."
            docker compose -f compose/prod/docker-compose.yml exec -T web python manage.py collectstatic --noinput
            
            # Health check
            echo "🏥 Performing health check..."
            sleep 10
            if curl -f -s http://localhost:8000/health/ > /dev/null; then
              echo "✅ Production deployment successful!"
              echo "🌐 Application is running at: https://${{ secrets.PROD_DOMAIN || 'your-domain.com' }}"
            else
              echo "❌ Health check failed. Rolling back..."
              
              # Rollback to backup
              LATEST_BACKUP=$(ls -t $APP_DIR.backup.pr${{ github.event.inputs.pr_number }}.* | head -1)
              if [ -n "$LATEST_BACKUP" ]; then
                echo "🔄 Rolling back to: $LATEST_BACKUP"
                sudo rm -rf $APP_DIR
                sudo mv $LATEST_BACKUP $APP_DIR
                cd $APP_DIR
                docker compose -f compose/prod/docker-compose.yml up --build -d
              fi
              
              exit 1
            fi

      # ====================================================================
      # SET HEALTH STATUS ACTIONS
      # ====================================================================
      - name: Set Health Status Bad
        if: github.event.inputs.action == 'set-health-bad'
        run: |
          echo "❌ Setting health status to BAD for PR #${{ github.event.inputs.pr_number }}"
          
          # Create health status file
          echo "BAD: $(date) - Set by @amal-googerit" > health-status.txt
          
          # This will be used to update the PR interface
          echo "Health status set to BAD"

      - name: Set Health Status Good
        if: github.event.inputs.action == 'set-health-good'
        run: |
          echo "✅ Setting health status to GOOD for PR #${{ github.event.inputs.pr_number }}"
          
          # Create health status file
          echo "GOOD: $(date) - Set by @amal-googerit" > health-status.txt
          
          # This will be used to update the PR interface
          echo "Health status set to GOOD"

      # ====================================================================
      # UPDATE PR INTERFACE
      # ====================================================================
      - name: Update PR Interface
        run: |
          # Get current health status
          HEALTH_STATUS="UNKNOWN"
          if [ -f health-status.txt ]; then
            HEALTH_STATUS=$(head -1 health-status.txt)
          fi
          
          # Create updated PR interface based on action
          cat > updated-pr-interface.md << EOF
          # 🚀 PR Management Interface - Updated
          
          **PR #${{ github.event.inputs.pr_number }}** - Action: ${{ github.event.inputs.action }}
          
          ## 📊 Current Status
          
          - **Health Status**: $HEALTH_STATUS
          - **Action Performed**: ${{ github.event.inputs.action }}
          - **Performed By**: @amal-googerit
          - **Time**: $(date)
          
          ## 🎛️ Available Actions
          
          **Only visible to @amal-googerit**
          
          EOF
          
          # Add different options based on health status
          if [[ "$HEALTH_STATUS" == *"BAD"* ]]; then
            cat >> updated-pr-interface.md << EOF
          ### ❌ Health Check FAILED
          
          - 🔄 **Revert PR** - Rollback main branch to previous commit
          - 🗑️ **Delete Branch** - Remove the feature branch and changes
          
          ### Manual Actions:
          - Use GitHub Actions → PR Management Actions
          - Select action: \`revert\` or \`delete-branch\`
          - Enter PR number: \`${{ github.event.inputs.pr_number }}\`
          - Type \`CONFIRM\` to proceed
          
          EOF
          elif [[ "$HEALTH_STATUS" == *"GOOD"* ]]; then
            cat >> updated-pr-interface.md << EOF
          ### ✅ Health Check PASSED
          
          - 🚀 **Deploy to Production** - Trigger production deployment
          
          ### Manual Actions:
          - Use GitHub Actions → PR Management Actions
          - Select action: \`deploy-production\`
          - Enter PR number: \`${{ github.event.inputs.pr_number }}\`
          - Type \`CONFIRM\` to proceed
          
          EOF
          else
            cat >> updated-pr-interface.md << EOF
          ### ⏳ Waiting for Health Check
          
          Please manually check your development server and set health status:
          
          - ✅ **Set Health Good** - If deployment is working
          - ❌ **Set Health Bad** - If deployment failed
          
          ### Manual Actions:
          - Use GitHub Actions → PR Management Actions
          - Select action: \`set-health-good\` or \`set-health-bad\`
          - Enter PR number: \`${{ github.event.inputs.pr_number }}\`
          - Type \`CONFIRM\` to proceed
          
          EOF
          fi
          
          cat >> updated-pr-interface.md << EOF
          
          ---
          *Last updated: $(date) by @amal-googerit*
          EOF

      - name: Post Updated PR Interface
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-management-interface
          path: updated-pr-interface.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Action Completion
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🎛️ PR Management Action completed: '${{ github.event.inputs.action }}' for PR #'${{ github.event.inputs.pr_number }}' by @amal-googerit"}' \
            ${{ secrets.SLACK_WEBHOOK || 'https://hooks.slack.com/services/placeholder' }} || true
