# .github/workflows/deploy.yml
name: Controlled Deployment Pipeline

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1. Dev Server Notification & Manual Pull Gate
  wait-for-dev:
    runs-on: ubuntu-latest
    # Simple job to notify you that the code is ready for manual dev deployment
    steps:
      - name: Notify to pull on Dev server
        run: echo "Main branch updated. @amal-googerit: Please pull on Dev server and approve the 'development' environment."

  # 2. Amal's Approval for Dev Validation
  confirm-dev-pull:
    runs-on: ubuntu-latest
    needs: wait-for-dev
    environment:
      name: development             # Links to the environment (Amal is the reviewer)
      reviewers: ['amal-googerit']  # Only Amal can approve this job
    steps:
      - name: Dev Server Confirmed Message
        run: echo "Dev server manually validated. Proceeding to Production Gate."

  # 3. Production Deployment Gate
  deploy-prod:
    runs-on: ubuntu-latest
    needs: confirm-dev-pull
    environment:
      name: production              # Links to the environment (Amal is the reviewer)
      url: https://${{ secrets.ALLOWED_HOSTS }}
      reviewers: ['amal-googerit']  # Only Amal can approve this job
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push Docker image
        id: docker_build
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository }}:${{ github.sha }}"
          docker build -f compose/prod/Dockerfile -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: SSH to Production Droplet & Update
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_KEY }}
          script: |
            # Navigate to the project directory on the server
            cd /opt/admsc-backend
            
            # Pull the new image
            docker pull ${{ env.IMAGE_TAG }}
            
            # Update the docker-compose file to use the new image
            sed -i "s|image: .*|image: ${{ env.IMAGE_TAG }}|g" compose/prod/docker-compose.yml
            
            # Restart the service using the production docker-compose file
            docker compose -f compose/prod/docker-compose.yml up -d
            
            # Run migrations
            docker compose -f compose/prod/docker-compose.yml exec -T web python manage.py migrate --noinput
            
            # Collect static files
            docker compose -f compose/prod/docker-compose.yml exec -T web python manage.py collectstatic --noinput
            
            # Cleanup old images
            docker system prune -f